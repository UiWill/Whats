üó∫Ô∏è Mapa da API ‚Äì Fluxo completo
1. Origem do evento

Voc√™ clica no bot√£o no seu sistema (ERP).

Esse clique chama sua API passando o CNPJ da empresa.

2. API ‚Äì Entrada

Endpoint (exemplo):

POST /api/enviar-relatorio
Body: { "cnpj": "62567108000101" }

3. Consulta no Banco Oracle

A API conecta no banco Oracle (config que voc√™ mostrou).

Consulta na tabela D_EMPRESAS:

SELECT NUMERO_WHATSAPP_GRUPO
FROM D_EMPRESAS
WHERE CNPJ_CO2 = :cnpj


Retorna o n√∫mero do grupo correspondente √† empresa.

4. Montagem do caminho da imagem

Com o cnpj, a API monta o caminho do arquivo:

C:\br.com.ControleVendaComercio\ERP_{cnpj}_VENDAS_COMERCIO\RelatorioVendas.jpg


Exemplo:

C:\br.com.ControleVendaComercio\ERP_62567108000101_VENDAS_COMERCIO\RelatorioVendas.jpg

5. Upload da imagem

Agora voc√™ tem duas op√ß√µes:

(A) Enviar imagem local

A API l√™ o arquivo .jpg do caminho local.

Usa form-data (Node.js) para enviar o bin√°rio pro Whatsmeow / WPPConnect.

(B) Enviar por URL

Se o seu sistema expuser essa imagem via servidor HTTP (ex: http://meuserver/relatorios/{cnpj}/RelatorioVendas.jpg),
fica mais simples ‚Üí API s√≥ manda a URL pro WhatsApp.

6. Envio para WhatsApp

A API chama o servi√ßo de mensagens (Whatsmeow, WPPConnect ou outro).

Passa:

phone: n√∫mero do grupo (ex: 1203xxxx@g.us)

filename: "RelatorioVendas.jpg"

caption: "Relat√≥rio do dia"

Arquivo (file) ou URL (path)

7. Resposta

Se envio ok ‚Üí retorna 200 { "status": "enviado" }

Se erro ‚Üí retorna 400 { "status": "erro", "mensagem": "n√£o achou imagem" }

üìå Estrutura da API
Endpoints principais

POST /api/enviar-relatorio

Entrada: { "cnpj": "..." }

A√ß√£o: consulta DB, pega caminho, envia imagem para grupo.

Sa√≠da: { "status": "enviado", "grupo": "...", "cnpj": "..." }

(Opcional) GET /api/teste-conexao

Para validar se est√° conectado no banco e no WhatsApp.

üîí Boas pr√°ticas para n√£o cair

Tratar erros (arquivo n√£o existe, grupo n√£o encontrado, conex√£o caiu).

Logs (guardar data/hora de cada envio).

Fila de envio se um dia precisar mandar pra muitas empresas.

Controle de sess√£o WhatsApp (se usar WPPConnect, monitorar se a sess√£o caiu e reautenticar).

üëâ Resumindo:

ERP ‚Üí chama API com CNPJ ‚Üí API consulta Oracle ‚Üí acha grupo ‚Üí monta caminho ‚Üí pega imagem ‚Üí envia pro WhatsApp.




para coenctar no oracle aqui esta a senha 
Nome do usuario: DID_SISTEMAS
Senha: D_d2017

nome do Host: nuvem.dnotas.com.br
porta: 1521
SID: xe



 üìã Comandos para rodar no servidor (igual aqui):

  # 1. Primeiro, clone o projeto no servidor
  git clone https://github.com/UiWill/Whats.git
  cd Whats

  # 2. Instalar depend√™ncias Node.js
  npm install

  # 3. Rodar o instalador autom√°tico do Oracle Client
  node install-oracle-client.js

  O script install-oracle-client.js vai fazer TUDO automaticamente:

  ‚úÖ Baixar Oracle Instant Client (70MB)‚úÖ Extrair em C:\oracle\instantclient_21_13‚úÖ Adicionar ao        
  PATH do Windows‚úÖ Atualizar arquivo .env‚úÖ Verificar se tudo est√° funcionando

  üìù Depois de rodar, teste:

  # 4. Testar conex√£o Oracle + WhatsApp
  npm run teste-conexao

  # 5. Se der tudo certo, iniciar servidor
  npm run dev

  ‚öôÔ∏è Configurar .env do servidor:

  S√≥ copie e edite o arquivo .env com os dados do servidor:

  # Servidor
  PORT=3000
  NODE_ENV=production

  # Oracle Database (SEUS DADOS)
  DB_USER=DID_SISTEMAS
  DB_PASSWORD=D_d2017
  DB_HOST=nuvem.dnotas.com.br
  DB_PORT=1521
  DB_SID=xe
  ORACLE_CLIENT_PATH=C:\oracle\instantclient_21_13

  # WhatsApp
  WHATSAPP_SESSION_NAME=erp-session-servidor

  # Paths (AJUSTAR para o servidor)
  RELATORIOS_BASE_PATH=C:\\\\caminho\\\\dos\\\\relatorios\\\\no\\\\servidor
  RELATORIO_FILENAME=RelatorioVendas.jpg

  üö® IMPORTANTE: Se der erro de permiss√£o, rode o CMD como Administrador antes de executar os
  comandos.